#!/bin/bash

# Revenge Installer Framework version 0.04
#
# Written by Jody James
#
#
# This program is free software, provided under the GNU General Public License
# as published by the Free Software Foundation. So feel free to copy, distribute,
# or modify it as you wish.
#

# Selecting the Drive
man_partition() {
list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

zenity --info --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" --height=10 width=150

lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
sed -i 's/\<disk\>//g' devices.txt
devices=` awk '{print "FALSE " $0}' devices.txt `

dev=$(zenity --list --title="$title" --radiolist --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

# Partitioning
# Allow user to partition using gparted
zenity --question --title="$title" --text "Do you need to partition $dev?\nSelect 'yes' to open gparted and partition\nthe disk or format partitions if needed.\nThe installer will not format the partitions after this,\nso if your partitions need to be formatted please select yes\nand use gparted to format them now."
if [ "$?" = "0" ]
	then gparted
fi

	# Select root partition
	root_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the root partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')
	#mounting root partition
	mount $root_part /mnt
	
	# Swap partition?
	zenity --question --title="$title" --text "Do you want to use a swap partition?" --height=40
		if [ "$?" = "0" ]
		then swap_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the swap partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')
		mkswap $swap_part
		fi
	
	# Boot Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate boot partition?" --height=40
		if [ "$?" = "0" ]
		then boot_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the boot partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
--radiolist --multiple --column ' ' --column 'Partitions')

		mkdir -p /mnt/boot
		mount $boot_part /mnt/boot
	
		fi
	
	# Home Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate home partition?" --height=40
		if [ "$?" = "0" ]
		then home_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the home partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
		--radiolist --multiple --column ' ' --column 'Partitions')
		# mounting home partition
		mkdir -p /mnt/home
		mount $root_part /mnt/home
		fi
}

auto_partition() {
	list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

	zenity --info --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" --height=10 width=150

	lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
	sed -i 's/\<disk\>//g' devices.txt
	devices=` awk '{print "FALSE " $0}' devices.txt `

	dev=$(zenity --list --title="$title" --radiolist --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

	# Find total amount of RAM
	ram=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
	# Find where swap partition stops
	num=$(($ram + 513))
	
	if [ "$SYSTEM" = "UEFI" ]
	then
	Parted "mklabel gpt"
	Parted "mkpart primary ESP fat32 1MiB 513MiB"
	Parted "set 1 boot on"
	Parted "mkpart primary linux-swap 513MiB ${num}MiB"
	Parted "mkpart primary ext4 ${num}MiB 100%"
	mkfs.fat -F32 ${dev}1
	mkswap ${dev}2
	swapon ${dev}2
	mkfs.ext4 ${dev}3
	mkdir -p /mnt/boot
	mount ${dev}3 /mnt
	mount ${dev}1 /mnt/boot
	else
	Parted "mklabel msdos"
	Parted "mkpart primary linux-swap 1MiB ${ram}MiB"
	Parted "mkpart primary ext4 ${ram}MiB 100%"
	Parted "set 2 boot on"
	mkswap ${dev}1
	swapon ${dev}1
	mkfs.ext ${dev}2
	mount ${dev}2 /mnt
	fi
}	

partition() {
	ans=$(zenity --list --title="$title" --radiolist --text "Would you like to use automatic partitioning or would you like to partition the disk for installation yourself?\nAutomatic Partitioning will completely erase the disk that you select and install Arch." --column Select --column Choice FALSE "Automatic Partitioning" FALSE "Manual Partitioning")

	if [ "$ans" = "Automatic Partitioning" ]
	then auto_partition
	else
	man_partition
	fi

}

configure() {
# Getting Locale
locales=$(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8 | sort | awk '{ printf "FALSE ""\0"$0"\0" }')

locale=$(zenity --list --title="$title" --radiolist --text "Select your locale/language." --column Select --column Locale $locales --height=350)

# Getting Timezone
zones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sed "s/\/.*//g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

zone=$(zenity --list --title="$title" --radiolist --text "Select your country/zone." --column Select --column Zone $zones --height=350)

subzones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "$zone/" | sed "s/$zone\///g" | sort -ud)

subzone=$(zenity --list --title="$title" --radiolist --text "Select your sub-zone." --column Select --column Zone $subzones --height=350)

# Getting Clock Preference
clock=$(zenity --list --title="$title" --radiolist --text "Would you like to use UTC or Local Time\nUTC is recommended unless you are dual booting with Windows." --column Select --column Time TRUE utc FALSE localtime)

# Getting hostname, username, root password, and user password
hname=$(zenity --entry --title="$title" --text "Please enter a hostname for your system.\nIt must be in all lowercase letters." --entry-text "revenge")

username=$(zenity --entry --title="$title" --text "Please enter a username for the new user.\nAgain, in all lowercase." --entry-text "user")
}

root_password() {
rtpasswd=$(zenity --entry --title="$title" --text "Please enter a root password." --entry-text "password")
rtpasswd2=$(zenity --entry --title="$title" --text "Please re-enter your root password." --entry-text "password")
	if [ "$rtpasswd" != "$rtpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		root_password
	fi
}


user_password() {
userpasswd=$(zenity --entry --title="$title" --text "Please enter a password for $username." --entry-text "password")
userpasswd2=$(zenity --entry --title="$title" --text "Please re-enter a password for $username." --entry-text "password")
	if [ "$userpasswd" != "$userpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		user_password
	fi
}


desktop() {
# Choosing Desktop
desktop=$(zenity --list --title="$title" --radiolist --text "What desktop would you like to install?" --column Select --column Desktop FALSE "gnome" FALSE "gnome gnome-extra" FALSE "plasma" FALSE "xfce4" FALSE "xfce4 xfce4-goodies" FALSE "lxde" FALSE "mate" FALSE "mate mate-extra")
}

# allowing user to select extra applications
installapps() {
extra=$(zenity --list --height=300 --title="$title" --radiolist --text "If you would like to select more applications to install,\nChoose the category from the list below.\nWhen you are finished selecting applications\nin each category you will be returned to this menu.\nThen simply select 'finished' when you are finished." --column Select --column Category FALSE internet FALSE media FALSE office FALSE utilities FALSE finished)

if [ "$extra" = "internet" ]
	then ./revenge_installer/internetlist2.sh;installapps
elif [ "$extra" = "media" ]
	then ./revenge_installer/medialist2.sh;installapps
elif [ "$extra" = "office" ]
	then ./revenge_installer/officelist2.sh;installapps
elif [ "$extra" = "utilities" ]
	then ./revenge_installer/utilslist2.sh;installapps
fi
}

# bootloader?
bootloader() {
zenity --question title="$title" --text "Do you want to install the bootloader?\nThe answer to this is usually yes, unless you are\ndual-booting and plan to have another system handle\nthe boot process." --height=40

if [ "$?" = "0" ]
	then echo "yes" > answer.txt
	else echo "no" > answer.txt
fi
btloader=` cat answer.txt `
}

# Installation
installing() {
zenity --question --title="$title" --text "Please click yes to begin installation.\nClick no to abort installation.\nAll of the packages will be downloaded fresh, so installation\nmay take a few minutes." --height=40

if [ "$?" = "1" ]
	then exit
fi

(
# sorting pacman mirrors
echo "5"
echo "# Sorting fastest pacman mirrors..."
reflector --verbose -l 50 -p http --sort rate --save /etc/pacman.d/mirrorlist

#installing base
echo "20"
echo "# Installing Base..."
pacstrap /mnt base base-devel

#generating fstab
echo "50"
echo "# Generating File System Table..."
genfstab -U /mnt >> /mnt/etc/fstab

#root password
echo "50"
echo "# Setting root password..."
touch .passwd
echo -e "$rtpasswd\n$rtpasswd2" > .passwd
arch_chroot "passwd root" < .passwd >/dev/null
rm .passwd

#adding user
echo "55"
echo "# Making new user..."
arch_chroot "useradd -m -g users -G adm,lp,wheel,power,audio,video -s /bin/bash $username"
touch .passwd
echo -e "$userpasswd\n$userpasswd2" > .passwd
arch_chroot "passwd $username" < .passwd >/dev/null
rm .passwd

#setting locale
echo "60"
echo "# Generating Locale..."
echo $locale >> /mnt/etc/locale.gen 
arch_chroot "locale-gen"
echo $locale > /mnt/etc/locale.conf
export LANG=$locale

#setting timezone
echo "# Setting Timezone..."
arch_chroot "ln -s /usr/share/zoneinfo/$zone/$subzone /etc/localtime"

#setting hw clock
echo "# Setting System Clock..."
arch_chroot "hwclock --systohc --$clock"

#setting hostname
echo "# Setting Hostname..."
arch_chroot "echo $hname > /etc/hostname"

# setting sudo permissions
echo "%wheel ALL=(ALL) ALL" >> /mnt/etc/sudoers

# installing video and audio packages
echo "70"
echo "# Installing Desktop, Sound, and Video Drivers..."
pacstrap /mnt mesa xf86-video-vmware xf86-video-ark xf86-video-ati xf86-video-fbdev xf86-video-glint xf86-video-i128 xf86-video-intel xf86-video-mach64 xf86-video-neomagic xf86-video-nouveau xf86-video-nv xf86-video-openchrome xf86-video-r128 xf86-video-savage xf86-video-siliconmotion xf86-video-sis xf86-video-tdfx xf86-video-trident xorg-server xorg-server-utils xorg-xinit xorg-twm xterm alsa-utils pulseaudio pulseaudio-alsa xf86-input-synaptics xf86-input-keyboard xf86-input-mouse intel-ucode networkmanager nm-connection-editor network-manager-applet

# installing chosen desktop
pacstrap /mnt $desktop

# starting desktop manager
if [ "$desktop" = "gnome" ]
	then arch_chroot "systemctl enable gdm.service"
	elif [ "$desktop" = "gnome gnome-extra" ]
	then arch_chroot "systemctl enable gdm.service"
	elif [ "$desktop" = "lxde" ]
	then arch_chroot "systemctl enable lxdm.service"
	elif [ "$desktop" = "plasma" ]
	then pacstrap /mnt sddm;arch_chroot "systemctl enable sddm.service"
	else
	pacstrap /mnt lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
	arch_chroot "systemctl enable lightdm"
fi

# enabling network manager
arch_chroot "systemctl enable NetworkManger"

# installing bootloader
if [ "$btloader" = "yes" ]
	then echo "80"
	echo "# Installing Bootloader..."
	pacstrap /mnt grub
	arch_chroot "grub-install $dev"
	arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi

# installing chosen software
echo "90"
echo "# Installing chosen software packages..."
./revenge_installer/installapps2.sh

# unmounting partitions
umount -R /mnt

echo "100"
echo "# Installation Finished!"
) | zenity --progress \
		-- title="$title"
}

# execution
# System Detection
if [[ -d "/sys/firmware/efi/" ]]; then
      # Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      SYSTEM="UEFI"
    else
      SYSTEM="BIOS"
fi


# Setting variables
title="Revenge Intaller Framework 0.04 $SYSTEM"

# Adapted from AIS. An excellent bit of code!
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}  

# Adapted from Feliz Installer
Parted() {
	parted --script $dev "$1"
}

partition
configure
root_password
user_password
desktop
installapps
bootloader
installing



