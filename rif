#!/bin/bash

# Revenge Installer Framework version 0.04
#
# Written by Jody James
#
#
# This program is free software, provided under the GNU General Public License
# as published by the Free Software Foundation. So feel free to copy, distribute,
# or modify it as you wish.
#

# System Detection
if [[ -d "/sys/firmware/efi/" ]]; then
      # Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      SYSTEM="UEFI"
    else
      SYSTEM="BIOS"
fi

# Setting variables
title="Revenge Intaller Framework 0.04 $SYSTEM"

# Adapted from AIS. An excellent bit of code!
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}  


# Selecting the Drive
lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
sed -i 's/\<disk\>//g' devices.txt
devices=` awk '{print "FALSE " $0}' devices.txt `

dev=$(zenity --list --title="$title" --radiolist --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

# Partitioning
# Allow user to partition using gparted
zenity --question --title="$title" --text "Do you need to partition $dev?\nSelect 'yes' to open gparted and partition\nthe disk or format partitions if needed."
if [ "$?" = "0" ]
	then gparted
fi

	# Select root partition
	root_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the root partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')

	zenity --question --title="$title" --text "Do you want to format $root_part?" --height=40
		if [ "$?" = "0" ]
		then mkfs.ext4 -q $root_part
		fi
	mount $root_part /mnt
	
	# Swap partition?
	zenity --question --title="$title" --text "Do you want to use a swap partition?" --height=40
		if [ "$?" = "0" ]
		then swap_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the swap partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')
		mkswap $swap_part
		fi
	
	# Boot Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate boot partition?" --height=40
		if [ "$?" = "0" ]
		then boot_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the boot partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
--radiolist --multiple --column ' ' --column 'Partitions')

			if [[ $SYSTEM == "BIOS" ]]; then
				mkfs.ext3 -q $boot_part 
			else
				mkfs.vfat -F32 -q $boot_part
			fi
		mkdir -p /mnt/boot
		mount $boot_part /mnt/boot
	
		fi
	
	# Home Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate boot partition?" --height=40
		if [ "$?" = "0" ]
		then home_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the home partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
		--radiolist --multiple --column ' ' --column 'Partitions')
		zenity --question --title="$title" --text "Do you want to format $home_part?" --height=40
			if [ "$?" = "0" ]
			then mkfs.ext4 -q $home_part
			fi
		mkdir -p /mnt/home
		mount $root_part /mnt/home
		fi
	

# Getting Locale
locales=$(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8 | sort | awk '{ printf "FALSE ""\0"$0"\0" }')

locale=$(zenity --list --title="$title" --radiolist --text "Select your locale/language." --column Select --column Locale $locales --height=350)

# Getting Timezone
zones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sed "s/\/.*//g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

zone=$(zenity --list --title="$title" --radiolist --text "Select your country/zone." --column Select --column Zone $zones --height=350)

subzones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "$zone/" | sed "s/$zone\///g" | sort -ud)

subzone=$(zenity --list --title="$title" --radiolist --text "Select your sub-zone." --column Select --column Zone $subzones --height=350)

# Getting Clock Preference
clock=$(zenity --list --title="$title" --radiolist --text "Would you like to use UTC or Local Time\nUTC is recommended unless you are dual booting with Windows." --column Select --column Time TRUE utc FALSE localtime)

# Getting hostname, username, root password, and user password
hname=$(zenity --entry --title="$title" --text "Please enter a hostname for your system.\nIt must be in all lowercase letters." --entry-text "revenge")

username=$(zenity --entry --title="$title" --text "Please enter a username for the new user.\nAgain, in all lowercase." --entry-text "user")

root_password() {
rtpasswd=$(zenity --entry --title="$title" --text "Please enter a root password." --entry-text "password")
rtpasswd2=$(zenity --entry --title="$title" --text "Please re-enter your root password." --entry-text "password")
	if [ "$rtpasswd" != "$rtpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		root_password
	fi
}

root_password

user_password() {
userpasswd=$(zenity --entry --title="$title" --text "Please enter a password for $username." --entry-text "password")
userpasswd2=$(zenity --entry --title="$title" --text "Please re-enter a password for $username." --entry-text "password")
	if [ "$userpasswd" != "$userpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		user_password
	fi
}

user_password

# Choosing Desktop
desktop=$(zenity --list --title="$title" --radiolist --text "What desktop would you like to install?" --column Select --column Desktop FALSE gnome FALSE gnome-extra FALSE plasma FALSE xfce4 FALSE xfce4-goodies FALSE lxde FALSE mate FALSE mate-extra)

# Bootloader
btloader=$(zenity --question title="$title" --text "Do you want to install the bootloader?\nThe answer to this is usually yes, unless you are\ndual-booting and plan to have another system handle\nthe boot process." --height=40)

# Installation
zenity --question --title="$title" text "Please click yes to begin installation.\nClick no to abort installation.\nAll of the packages will be downloaded fresh, so installation\nmay take a few minutes." --height=40

if [ "$?" = "1" ]
	then exit
fi

(
echo "# Installing Base..."
pacstrap /mnt base base-devel

echo "# Generating File System Table..."
genfstab -U /mnt >> /mnt/etc/fstab

echo "# Setting root password..."
touch .passwd
echo -e "$rtpasswd\n$rtpasswd2" > .passwd
arch_chroot "passwd root" < .passwd >/dev/null
rm .passwd

echo "# Making new user..."
arch_chroot "useradd -m -g users -G adm,lp,wheel,power,audio,video -s /bin/bash $username"
touch .passwd
echo -e "$userpasswd\n$userpasswd2" > .passwd
arch_chroot "passwd $username" < .passwd >/dev/null
rm .passwd

echo "# Generating Locale..."
echo $locale >> /mnt/etc/locale.gen 
arch_chroot "locale-gen"
echo $locale > /mnt/etc/locale.conf
export LANG=$locale

#setting timezone
echo "# Setting Timezone..."
arch_chroot "ln -s /usr/share/zoneinfo/$zone/$subzone /etc/localtime"

#setting hw clock
echo "# Setting System Clock..."
arch_chroot "hwclock --systohc --$clock"

#setting hostname
echo "# Setting Hostname..."
arch_chroot "echo $hname > /etc/hostname"

# setting sudo permissions
echo "%wheel ALL=(ALL) ALL" >> /mnt/etc/sudoers

# installing video and audio packages
echo "# Installing Desktop, Sound, and Video Drivers..."
pacstrap /mnt mesa xf86-video-vmware xf86-video-ark xf86-video-ati xf86-video-fbdev xf86-video-glint xf86-video-i128 xf86-video-intel xf86-video-mach64 xf86-video-neomagic xf86-video-nouveau xf86-video-nv xf86-video-openchrome xf86-video-r128 xf86-video-savage xf86-video-siliconmotion xf86-video-sis xf86-video-tdfx xf86-video-trident xorg-server xorg-server-utils xorg-xinit xorg-twm xterm alsa-utils pulseaudio pulseaudio-alsa xf86-input-synaptics xf86-input-keyboard xf86-input-mouse intel-ucode yaourt

# installing chosen desktop
pacstrap /mnt $desktop
pacstrap /mnt lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings

# enabling services
arch_chroot "systemctl enable lightdm.service"
arch_chroot "systemctl enable NetworkManger.service"

# installing bootloader
if [ "$btloader" = "0" ]
	then pacstrap /mnt grub os-prober
	arch_chroot "grub-install $dev"
	arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi
) | zenity --progress -- title="$title" --text "Installing..." --pulsate --auto-close













